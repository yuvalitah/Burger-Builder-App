{"version":3,"sources":["components/UI/Input/Input.tsx","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.tsx","containers/Checkout/ContactData/ContactData.tsx","containers/Checkout/Checkout.tsx"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","updatedFormIsValid","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"4KAqGeA,IAjGD,SAACC,GACb,IAAIC,EAA4B,KAC1BC,EAAe,CAACC,IAAQC,cAE1BJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SACjDL,EAAaM,KAAKL,IAAQM,SAG5B,IAAIC,EAA+B,KASnC,OARIV,EAAMK,SAAWL,EAAMO,UACzBG,EACE,oBAAGC,UAAWR,IAAQS,gBAAtB,kCACwBZ,EAAMa,cAK1Bb,EAAMc,aACZ,IAAK,QACHb,EACE,+CACEU,UAAWT,EAAaa,KAAK,MACzBf,EAAMgB,eAFZ,IAGEC,MAAOjB,EAAMiB,MACbC,SAAUlB,EAAMmB,WAGpB,MACF,IAAK,WACHlB,EACE,kDACEU,UAAWT,EAAaa,KAAK,MACzBf,EAAMgB,eAFZ,IAGEC,MAAOjB,EAAMiB,MACbC,SAAUlB,EAAMmB,WAGpB,MACF,IAAK,SACHlB,EACE,wBACEU,UAAWT,EAAaa,KAAK,KAC7BE,MAAOjB,EAAMiB,MACbC,SAAUlB,EAAMmB,QAHlB,SAKGnB,EAAMgB,cAAcI,QAAQC,KAAI,SAACC,GAAD,OAC/B,wBAA2BL,MAAOK,EAAOL,MAAzC,SACGK,EAAOC,cADGD,EAAOL,YAM1B,MACF,QACEhB,EACE,+CACEU,UAAWT,EAAaa,KAAK,MACzBf,EAAMgB,eAFZ,IAGEC,MAAOjB,EAAMiB,MACbC,SAAUlB,EAAMmB,WAMxB,OACE,sBAAKR,UAAWR,IAAQqB,MAAxB,UACE,uBAAOb,UAAWR,IAAQsB,MAA1B,SAAkCzB,EAAM0B,QACvCzB,EACAS,O,oBCxEPiB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB,iC,oBCA1KD,EAAOC,QAAU,CAAC,gBAAkB,2C,oBCApCD,EAAOC,QAAU,CAAC,YAAc,mC,4FCiCjBC,EA5BS,SAAC7B,GACvB,OACE,sBAAKW,UAAWR,IAAQ2B,gBAAxB,UACE,yDACA,qBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAArC,SACE,cAACC,EAAA,EAAD,CAAQC,YAAanC,EAAMmC,gBAE7B,cAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAStC,EAAMuC,kBAAxC,oBAGA,cAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAStC,EAAMwC,kBAAzC,0B,iGC+MSC,eA/BS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1BU,MAAOH,EAAME,cAAcE,WAC3BC,QAASL,EAAMM,MAAMD,QACrBE,MAAOP,EAAMQ,KAAKD,MAClBE,OAAQT,EAAMQ,KAAKC,WAII,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACC,EAAmBL,GAApB,OACbG,EAASG,IAAuBD,EAAWL,QAkBlCR,CAA6Ce,aA/MxC,SAACxD,GAAW,IAAD,EACKyD,mBAAqB,CACrDC,KAAM,CACJ5C,YAAa,QACbE,cAAe,CACb2C,KAAM,OACNC,YAAa,aAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPxD,SAAS,GAEXyD,OAAQ,CACNlD,YAAa,QACbE,cAAe,CACb2C,KAAM,OACNC,YAAa,UAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPxD,SAAS,GAEX0D,QAAS,CACPnD,YAAa,QACbE,cAAe,CACb2C,KAAM,OACNC,YAAa,YAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEbJ,OAAO,EACPxD,SAAS,GAEX6D,QAAS,CACPtD,YAAa,QACbE,cAAe,CACb2C,KAAM,OACNC,YAAa,WAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPxD,SAAS,GAEX8D,MAAO,CACLvD,YAAa,QACbE,cAAe,CACb2C,KAAM,QACNC,YAAa,eAEf3C,MAAO,GACP4C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPxD,SAAS,GAEX+D,eAAgB,CACdxD,YAAa,SACbE,cAAe,CACbI,QAAS,CACP,CAAEH,MAAO,UAAWM,aAAc,WAClC,CAAEN,MAAO,WAAYM,aAAc,cAGvCN,MAAO,UACP8C,OAAO,KA9EkB,mBACtBQ,EADsB,KACXC,EADW,OAiFSf,oBAAkB,GAjF3B,mBAiFtBgB,EAjFsB,KAiFTC,EAjFS,KAsIvBC,EAAgC,GACtC,IAAK,IAAIC,KAAOL,EACdI,EAAkBnE,KAAK,CACrBqE,GAAID,EACJE,OAAQP,EAAUK,KAItB,IAAIG,EACF,uBAAMC,SA5Da,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAuB,CAC3Bf,QAAS,GACTE,eAAgB,GAChBD,MAAO,GACPX,KAAM,GACNM,OAAQ,GACRC,QAAS,IAGX,IAAK,IAAImB,KAAyBb,EAChCY,EAASC,GAAyBb,EAAUa,GAAuBnE,MAGrE,IAAM+B,EAAgB,CACpBb,YAAanC,EAAM2C,KACnBE,MAAO7C,EAAM6C,MACbS,UAAW6B,EACXhC,OAAQnD,EAAMmD,QAGhBnD,EAAMqD,cAAcL,EAAOhD,EAAMiD,QAqCjC,UACG0B,EAAkBtD,KAAI,SAACgE,GAAD,OACrB,cAAC7D,EAAA,EAAD,CAEEV,YAAauE,EAAYP,OAAOhE,YAChCE,cAAeqE,EAAYP,OAAO9D,cAClCC,MAAOoE,EAAYP,OAAO7D,MAC1BZ,SAAUgF,EAAYP,OAAOf,MAC7BzD,eAAgB+E,EAAYP,OAAOjB,WACnCtD,QAAS8E,EAAYP,OAAOvE,QAC5BM,UAAWwE,EAAYR,GACvB1D,QAAS,SAAC8D,GAAD,OA7CW,SAACA,EAC1BK,GACD,IAAMC,EAAmCC,YAAajB,EAAUe,GAAkB,CAChFrE,MAAOgE,EAAMQ,OAAOxE,MACpB8C,MAAO2B,YACLT,EAAMQ,OAAOxE,MACbsD,EAAUe,GAAiBzB,YAE7BtD,SAAS,IAGLoF,EAA+BH,YAAajB,EAAD,eAC9Ce,EAAkBC,IAGjBK,GAA8B,EAClC,IAAK,IAAIN,KAAmBK,EAC1BC,EACED,EAAiBL,GAAiBvB,OAAS6B,EAG/CpB,EAAamB,GACbjB,EAAekB,GAwBPC,CAAoBZ,EAAOI,EAAYR,MATpCQ,EAAYR,OAYrB,cAACzC,EAAA,EAAD,CAAQC,QAAQ,UAAUyD,UAAWrB,EAArC,sBAUJ,OAJIzE,EAAM+C,UACRgC,EAAO,cAACgB,EAAA,EAAD,KAIP,sBAAKpF,UAAWR,IAAQ6F,YAAxB,UACE,yDACCjB,OAoCmFkB,MCvK3ExD,uBAjBS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1B+D,UAAWxD,EAAMM,MAAMkD,aAcZzD,EAhDE,SAACzC,GAChB,IAQImG,EAAuB,cAAC,IAAD,CAAUC,GAAG,wBAExC,GAAIpG,EAAM2C,KAAM,CACd,IAAM0D,EAAiCrG,EAAMkG,UAAY,cAAC,IAAD,CAAUE,GAAG,wBAA2B,KACjGD,EACE,gCACGE,EACD,cAACvE,EAAD,CACEK,YAAanC,EAAM2C,KACnBJ,kBAjByB,WAC/BvC,EAAMsG,QAAQC,UAiBR/D,kBAdyB,WAC/BxC,EAAMsG,QAAQE,QAAQ,6BAelB,cAAC,IAAD,CACEC,KAAMzG,EAAM0G,MAAMD,KAAO,gBACzBE,UAAWX,OAKnB,OAAOG","file":"static/js/3.d02fcc4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst input = (props) => {\r\n  let inputElement: JSX.Element = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  let validationError: JSX.Element = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = (\r\n      <p className={classes.ValidationError}>\r\n        Please enter a valid {props.valueType}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\ninput.propTypes = {\r\n  changed: PropTypes.func.isRequired,\r\n  elementConfig: PropTypes.shape({\r\n    type: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.string.isRequired,\r\n      displayValue: PropTypes.string.isRequired,\r\n    }))\r\n  }).isRequired,\r\n  elementType: PropTypes.string.isRequired,\r\n  invalid: PropTypes.bool.isRequired,\r\n  shouldValidate: PropTypes.shape({\r\n    required: PropTypes.bool.isRequired,\r\n    minLength: PropTypes.number,\r\n    maxLength: PropTypes.number,\r\n    isEmail: PropTypes.bool,\r\n  }),\r\n  valueType: PropTypes.string.isRequired,\r\n  touched: PropTypes.bool,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__161Ey\",\"Label\":\"Input_Label__1qT1V\",\"InputElement\":\"Input_InputElement__1O_Yj\",\"Invalid\":\"Input_Invalid__1ghvd\",\"ValidationError\":\"Input_ValidationError__MVVJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1FDIh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2M_pl\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\ncheckoutSummary.propTypes = {\r\n  ingredients: PropTypes.exact({\r\n    salad: PropTypes.number,\r\n    bacon: PropTypes.number,\r\n    cheese: PropTypes.number,\r\n    meat: PropTypes.number,\r\n  }),\r\n  checkoutCancelled: PropTypes.func.isRequired,\r\n  checkoutContinued: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\nimport { RootState } from \"../../../Types/RootState/RootState\";\r\nimport { IOrder, IOrderData } from \"../../../Interfaces/IOrder/IOrderState/IOrderState\";\r\nimport { IOrderForm } from \"../../../Interfaces/IOrder/IOrderForm/IOrderForm\";\r\nimport { IFormElement, IElement } from \"../../../Interfaces/IFormElement/IFormElement\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState<IOrderForm>({\r\n    name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Street\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"ZIP Code\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Country\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your E-Mail\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          { value: \"fastest\", displayValue: \"Fastest\" },\r\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState<boolean>(false);\r\n\r\n  const orderHandler = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n\r\n    const formData: IOrderData = {\r\n      country: \"\",\r\n      deliveryMethod: \"\",\r\n      email: \"\",\r\n      name: \"\",\r\n      street: \"\",\r\n      zipCode: \"\",\r\n    };\r\n\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n\r\n    const order: IOrder = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\r\n     inputIdentifier: string): void => {\r\n    const updatedFormElement: IFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n\r\n    const updatedOrderForm: IOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let updatedFormIsValid: boolean = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      updatedFormIsValid =\r\n        updatedOrderForm[inputIdentifier].valid && updatedFormIsValid;\r\n    }\r\n\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(updatedFormIsValid);\r\n  };\r\n\r\n  const formElementsArray: IElement[] = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n\r\n  let form: JSX.Element = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          valueType={formElement.id}\r\n          changed={(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>) => \r\n            inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your contact data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData: IOrder, token: string) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nContactData.propTypes = {\r\n  ings: PropTypes.exact({\r\n    salad: PropTypes.number.isRequired,\r\n    bacon: PropTypes.number.isRequired,\r\n    cheese: PropTypes.number.isRequired,\r\n    meat: PropTypes.number.isRequired,\r\n  }),\r\n  price: PropTypes.number.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  token: PropTypes.string,\r\n  userId: PropTypes.string,\r\n  onOrderBurger: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../Types/RootState/RootState\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Checkout = (props) => {\r\n  const checkoutCancelledHandler = (): void => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = (): void => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  let summary: JSX.Element = <Redirect to=\"/Burger-Builder-App\" />;\r\n\r\n  if (props.ings) {\r\n    const purchasedRedirect: JSX.Element = props.purchased ? <Redirect to=\"/Burger-Builder-App\" /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nCheckout.propTypes = {\r\n  ings: PropTypes.exact({\r\n      salad: PropTypes.number,\r\n      bacon: PropTypes.number,\r\n      cheese: PropTypes.number,\r\n      meat: PropTypes.number,\r\n    }),\r\n  purchased: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}