{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.tsx","containers/Orders/Orders.tsx"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientsOutput","map","ingredient","style","textTransform","display","margin","border","padding","className","classes","Order","Number","parseFloat","price","toFixed","Orders","useEffect","a","onFetchOrders","token","userId","fetchOrders","orders","Spinner","loading","id","connector","connect","state","auth","dispatch","actions","ropTypes","PropTypes","arrayOf","exact","salad","number","bacon","cheese","meat","isRequired","string","orderData","country","email","street","zipCode","deliveryMethod","lodaing","bool","func","withErrorHandler","axios"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,MAAQ,uB,qGCgDXC,EA5CD,SAACC,GACb,IAAMC,EAA+B,GACrC,IAAK,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAI9B,IAAMI,EAAmCL,EAAYM,KAAI,SAACC,GAAD,OACvD,uBAEEC,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAPb,UAUGN,EAAWJ,KAVd,KAUsBI,EAAWH,OAVjC,MACOG,EAAWJ,SAapB,OACE,sBAAKW,UAAWC,IAAQC,MAAxB,UACE,8CAAiBX,KACjB,wCACS,0CAAaY,OAAOC,WAAWnB,EAAMoB,OAAOC,QAAQ,a,yDCvB7DC,EAAS,SAACtB,GACduB,qBAAU,YACmB,uCAAG,sBAAAC,EAAA,sEACtBxB,EAAMyB,cAAczB,EAAM0B,MAAO1B,EAAM2B,QADjB,2CAAH,qDAI3BC,KACC,IAEH,IAAIC,EAAsC,cAACC,EAAA,EAAD,IAU1C,OATK9B,EAAM+B,UACTF,EAAS7B,EAAM6B,OAAOtB,KAAI,SAACR,GAAD,OACxB,cAACkB,EAAD,CAEEhB,YAAaF,EAAME,YACnBmB,MAAOrB,EAAMqB,OAFRrB,EAAMiC,QAMV,8BAAMH,KAmBTI,EAAYC,aAhBM,SAACC,GACvB,MAAO,CACLN,OAAQM,EAAMpC,MAAM8B,OACpBE,QAASI,EAAMpC,MAAMgC,QACrBL,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAII,SAACU,GAC1B,MAAO,CACLZ,cAAe,SAACC,EAAeC,GAAhB,OACbU,EAASC,IAAoBZ,EAAOC,SAM1CL,EAAOiB,SAAW,CAChBV,OAAQW,IAAUC,QAAQD,IAAUE,MAAM,CACxCzC,YAAauC,IAAUE,MAAM,CAC3BC,MAAOH,IAAUI,OACjBC,MAAOL,IAAUI,OACjBE,OAAQN,IAAUI,OAClBG,KAAMP,IAAUI,SACfI,WACH5B,MAAOoB,IAAUI,OAAOI,WACxBrB,OAAQa,IAAUS,OAAOD,WACzBE,UAAWV,IAAUE,MAAM,CACzBS,QAASX,IAAUS,OACnBG,MAAOZ,IAAUS,OACjB7C,KAAMoC,IAAUS,OAChBI,OAAQb,IAAUS,OAClBK,QAASd,IAAUS,OACnBM,eAAgBf,IAAUS,SACzBD,WACHhB,GAAIQ,IAAUS,OAAOD,cACnBA,WACJQ,QAAShB,IAAUiB,KAAKT,WACxBtB,MAAOc,IAAUS,OACjBtB,OAAQa,IAAUS,OAClBxB,cAAee,IAAUkB,KAAKV,YAGjBf,YAAU0B,YAAiBrC,EAAQsC","file":"static/js/5.245e98a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2F1BZ\"};","import React from \"react\";\r\nimport classes from \"./Order.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { IOrderElement } from \"../../Interfaces/IFormElement/IFormElement\";\r\n\r\nconst order = (props) => {\r\n  const ingredients: IOrderElement[] = [];\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName],\r\n    });\r\n  }\r\n\r\n  const ingredientsOutput: JSX.Element[] = ingredients.map((ingredient) => (\r\n    <span\r\n      key={ingredient.name}\r\n      style={{\r\n        textTransform: \"capitalize\",\r\n        display: \"inline-block\",\r\n        margin: \"0 8px\",\r\n        border: \"1px solid #ccc\",\r\n        padding: \"5px\",\r\n      }}\r\n    >\r\n      {ingredient.name} ({ingredient.amount})\r\n    </span>\r\n  ));\r\n\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientsOutput}</p>\r\n      <p>\r\n        Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\norder.propTypes = {\r\n  ingredients: PropTypes.exact({\r\n    salad: PropTypes.number,\r\n    bacon: PropTypes.number,\r\n    meat: PropTypes.number,\r\n    cheese: PropTypes.number,\r\n  }).isRequired,\r\n  price: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default order;\r\n","import React, { useEffect } from \"react\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport axios from \"../../axios-orders\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { RootState } from \"../../Types/RootState/RootState\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Orders = (props) => {\r\n  useEffect(() => {\r\n    const fetchOrders: Function = async (): Promise<void> => {\r\n      await props.onFetchOrders(props.token, props.userId);\r\n    };\r\n\r\n    fetchOrders();\r\n  }, []);\r\n\r\n  let orders: JSX.Element | JSX.Element[] = <Spinner />;\r\n  if (!props.loading) {\r\n    orders = props.orders.map((order) => (\r\n      <Order\r\n        key={order.id}\r\n        ingredients={order.ingredients}\r\n        price={order.price}\r\n      />\r\n    ));\r\n  }\r\n  return <div>{orders}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token: string, userId: string) =>\r\n      dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nOrders.ropTypes = {\r\n  orders: PropTypes.arrayOf(PropTypes.exact({\r\n    ingredients: PropTypes.exact({\r\n      salad: PropTypes.number,\r\n      bacon: PropTypes.number,\r\n      cheese: PropTypes.number,\r\n      meat: PropTypes.number,\r\n    }).isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    userId: PropTypes.string.isRequired,\r\n    orderData: PropTypes.exact({\r\n      country: PropTypes.string,\r\n      email: PropTypes.string,\r\n      name: PropTypes.string,\r\n      street: PropTypes.string,\r\n      zipCode: PropTypes.string,\r\n      deliveryMethod: PropTypes.string,\r\n    }).isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  })).isRequired,\r\n  lodaing: PropTypes.bool.isRequired,\r\n  token: PropTypes.string,\r\n  userId: PropTypes.string,\r\n  onFetchOrders: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connector(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}