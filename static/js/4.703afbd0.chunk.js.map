{"version":3,"sources":["components/UI/Input/Input.tsx","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.tsx"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","validationError","className","ValidationError","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","path","useState","type","placeholder","validation","required","isEmail","valid","minLength","controls","setControls","setIsSignup","useEffect","submitHandler","event","a","preventDefault","formElementsArray","key","id","config","form","formElement","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","btnType","clicked"],"mappings":"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","file":"static/js/4.703afbd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst input = (props) => {\r\n  let inputElement: JSX.Element = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  let validationError: JSX.Element = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = (\r\n      <p className={classes.ValidationError}>\r\n        Please enter a valid {props.valueType}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\ninput.propTypes = {\r\n  changed: PropTypes.func.isRequired,\r\n  elementConfig: PropTypes.shape({\r\n    type: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.string.isRequired,\r\n      displayValue: PropTypes.string.isRequired,\r\n    }))\r\n  }).isRequired,\r\n  elementType: PropTypes.string.isRequired,\r\n  invalid: PropTypes.bool.isRequired,\r\n  shouldValidate: PropTypes.shape({\r\n    required: PropTypes.bool.isRequired,\r\n    minLength: PropTypes.number,\r\n    maxLength: PropTypes.number,\r\n    isEmail: PropTypes.bool,\r\n  }),\r\n  valueType: PropTypes.string.isRequired,\r\n  touched: PropTypes.bool,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__161Ey\",\"Label\":\"Input_Label__1qT1V\",\"InputElement\":\"Input_InputElement__1O_Yj\",\"Invalid\":\"Input_Invalid__1ghvd\",\"ValidationError\":\"Input_ValidationError__MVVJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__inrc4\"};","import React, { useState, useEffect } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\nimport { IControls } from \"../../Interfaces/IBurgerBuilder/IControls/IControls\";\r\nimport { IElement } from \"../../Interfaces/IFormElement/IFormElement\";\r\nimport { RootState } from \"../../Types/RootState/RootState\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Auth = (props) => {\r\n  const [controls, setControls] = useState<IControls>({\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Mail Address\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"password\",\r\n        placeholder: \"Password\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n  const [isSignup, setIsSignup] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    if (!props.buildingBurger && props.authRedirectPath !== \"/\") {\r\n      props.onSetAuthRedirectPath(\"/\");\r\n    }\r\n  });\r\n\r\n  const inputChangedHandler = (event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\r\n     controlName: string) => {\r\n    const updatedControls: IControls = updateObject(controls, {\r\n      [controlName]: updateObject(controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    setControls(updatedControls);\r\n  };\r\n\r\n  const submitHandler = async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n    event.preventDefault();\r\n    await props.onAuth(controls.email.value, controls.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = (): void => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray: IElement[] = [];\r\n  for (let key in controls) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: controls[key],\r\n    });\r\n  }\r\n\r\n  let form: JSX.Element[] | JSX.Element = formElementsArray.map((formElement) => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      valueType={formElement.id}\r\n      changed={(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>) =>\r\n         inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage: JSX.Element = null;\r\n\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect: JSX.Element = null;\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\r\n        SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email: string, password: string, isSignup: boolean) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: (path: string) =>\r\n      dispatch(actions.setAuthRedirectPath(path)),\r\n  };\r\n};\r\n\r\nAuth.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.shape({\r\n    message: PropTypes.string.isRequired,\r\n  }),\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n  buildingBurger: PropTypes.bool.isRequired,\r\n  authRedirectPath: PropTypes.string.isRequired,\r\n  onAuth: PropTypes.func.isRequired,\r\n  onSetAuthRedirectPath: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}